{"version":3,"file":"js/bounce.js","sources":["src/board.c","src/bounce_utils.c","src/display_state.c","src/linked_list.c","src/trajectory.c"],"names":[],"mappingseA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;;AAFA;AAAA;AAAA;;AAOA;AAAA;;;;;;;;;;;AAgBA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAAA;AAAA;;AADA;AAAA;AAAA;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAGA;AAHA;;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;AAgBA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAKA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;;AAIA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANA;AAAA;AAAA;;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;;;;;;;AC/GA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;;;;AAIA;AAAA;AAAA;AAAA;;;;;;;;;;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;;;;;AAIA;AACA;AAeA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;AAgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AC7DA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;;;;;;;;;;;;;;;;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAYA;;;;;;;;;;;;;;;;;;;AAiBA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAeA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;;;;ACvEA;AAAA;;;;;;;;;;;;;AAiCA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;;AAdA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AAGA;AAAA;AAAA;AAAA;AAGA;;;;;;;;;;;;;;AC7CA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;;;;;;;AAUA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;AAIA;AAAA;;AAHA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;;;;;;;;;;;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;AAYA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA","sourcesContent":["\n#ifndef _XOPEN_SOURCE\n#define _XOPEN_SOURCE 700\n#endif\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdint.h>\n#include <inttypes.h>\n\n#include \"board.h\"\n#include \"bounce_utils.h\"\n\nBoard* board_create(int64_t width, int64_t height){\n\tBoard* self = calloc(1, sizeof(Board));\n\n\tself->width = width;\n\tself->height = height;\n\n\tself->been_drawn = 0;\n\tself->draw_count = 0;\n\tself->fps = 0;\n\tself->fps_time = get_time();\n\n\tself->sboard = calloc(height, sizeof(uint8_t***));\n\n\tfor (int row = 0; row < height; row++){\n\t\tself->sboard[row] = calloc(width, sizeof(uint8_t**));\n\t\tfor (int col = 0; col < width; col++){\n\t\t\tself->sboard[row][col] = (uint8_t*)strdup(\"0\");\n\t\t}\n\t}\n\n\treturn self;\n}\n\nvoid board_destroy(Board* self){\n\t// Free all the cells in the board\n\tfor (int row = 0; row < self->height; row++){\n\t\tfor (int col = 0; col < self->width; col++){\n\t\t\tfree(self->sboard[row][col]);\n\t\t}\n\t\tfree(self->sboard[row]);\n\t}\n\tfree(self->sboard);\n\tfree(self);\n}\n\nvoid board_renew(Board* self){\n\tfor (int row = 0; row < self->height; row++){\n\t\tfor (int col = 0; col < self->width; col++){\n\t\t\tfree(self->sboard[row][col]);\n\t\t\tself->sboard[row][col] = 0;\n\t\t\tself->sboard[row][col] = (uint8_t*)strndup(\" \", 1);\n\t\t}\n\t}\n}\n\nvoid board_set_cell(Board* self, int64_t x, int64_t y, uint8_t* val){\n\t// By reflecting y, the board is zero indexed from the bottom left corner\n\t// instead of the top left.\n\ty = (self->height-1) - y;\n\tif (y < 0){\n\t\t// Negative indeces are remaped to LENGTH-N, where LENGTH is the height\n\t\t// of the board, and N is y. Behavior is similar to Python's array[-1].\n\t\twhile (y < 0){\n\t\t\ty += self->height;\n\t\t}\n\t}\n\tx = x % self->width;\n\n\tfree(self->sboard[y][x]);\n\tself->sboard[y][x] = 0;\n\n\tself->sboard[y][x] = (uint8_t*)strdup((char*)val);\n}\n\nvoid board_newline(Board* self){\n\tself->newlines_drawn++;\n\tprintf(\"\\n\");\n}\n\nvoid board_draw(Board* self){\n\tchar* frame = board_get_frame(self);\n\tprintf(\"%s\", frame);\n\tfree(frame);\n\treturn;\n}\n\n\nchar* board_get_frame(Board* self){\n\tchar* to_ret = calloc(2, sizeof(char));\n\tto_ret[0] = ' ';\n\tto_ret[1] = '\\0';\n\tif (self->been_drawn){\n\t\twhile (self->newlines_drawn){\n\t\t\tto_ret = str_concat(to_ret, \"\\r\\033[1A\");\n\t\t\tself->newlines_drawn--;\n\t\t}\n\t}\n\n\tint row, col;\n\tfor (row = 0; row < self->height; row++){\n\t\tfor (col = 0; col < self->width; col++){\n\t\t\tto_ret = str_concat(to_ret, (char*)(self->sboard[row][col]));\n\t\t}\n\t\t/*board_newline(self);*/\n\t\tto_ret = str_concat(to_ret, \"\\n\");\n\t\tself->newlines_drawn++;\n\t}\n\n\tself->draw_count += 1;\n\tif (get_time() - self->fps_time >= 1.0){\n\t\tself->fps = self->draw_count;\n\t\tself->draw_count = 0;\n\t\tself->fps_time = get_time();\n\t}\n\tchar* temp_str = calloc(15, sizeof(char));\n\tsprintf(temp_str, \"FPS: %\" PRId64 \"\\n\", self->fps);\n\tto_ret = str_concat(to_ret, temp_str);\n\tfree(temp_str);\n\tself->newlines_drawn++;\n\n\tself->been_drawn = true;\n\n\treturn to_ret;\n}\n\n\n","\n#ifndef _XOPEN_SOURCE\n#define _XOPEN_SOURCE 700\n#endif\n\n#include <sys/time.h> /* gettimeofday() */\n#include <stdlib.h> /* random() */\n#include <math.h> /* pow() */\n#include <string.h> /* strlen, strcat */\n#include <stdint.h>\n\n#include \"bounce_utils.h\"\n\ndouble get_time(){\n\tstruct timeval now;\n\tgettimeofday(&now, 0);\n\n\tdouble to_ret = 0.0;\n\n\tto_ret = now.tv_sec + (now.tv_usec / 1000000.0);\n\treturn to_ret;\n}\n\ndouble rand_float(){\n\treturn ((double)random() / (double)RAND_MAX);\n}\n\ndouble rand_float_range(double min, double max){\n\tdouble base = max - min;\n\tbase = rand_float() * base;\n\treturn base + min;\n}\n\nuint8_t* random_color(){\n\tint COLOR_COUNT = 12;\n\tchar* COLORS[] = {\n\t\t\"\\033[48;5;197m \\033[0m\", // Pink\n\t\t\"\\033[48;5;162m \\033[0m\", // Magenta\n\t\t\"\\033[48;5;54m \\033[0m\", // Purple\n\t\t\"\\033[48;5;196m \\033[0m\", // Red\n\t\t\"\\033[48;5;34m \\033[0m\", // Green\n\t\t\"\\033[48;5;35m \\033[0m\", // Green\n\t\t\"\\033[48;5;40m \\033[0m\", // Green\n\t\t\"\\033[48;5;19m \\033[0m\", // Blue\n\t\t\"\\033[48;5;20m \\033[0m\", // Blue\n\t\t\"\\033[48;5;39m \\033[0m\", // Blue\n\t\t\"\\033[48;5;226m \\033[0m\", // Yellow\n\t\t\"\\033[48;5;229m \\033[0m\", // Yellow\n\t\t\"\\033[48;5;208m \\033[0m\", // Orange\n\t};\n\treturn (uint8_t*)COLORS[random() % COLOR_COUNT];\n}\n\ndouble skew_parabola(double num, double low, double high){\n\tdouble width = high - low;\n\tdouble scaled = (num - low)/width;\n\tdouble skew_val = 1 - pow(scaled-1, 2);\n\n\treturn skew_val*width + low;\n}\n\nint default_vel(int height){\n\t// Since there's a random delta applied to the gravity of each line, and\n\t// that delta could be as much as -1, we calculate the max height using the\n\t// lowest possible gravity that could arise.\n\tdouble gravity = -8.8;\n\tdouble vel = sqrt(-(2 * gravity * height));\n\n\treturn (int)(floor(vel));\n}\n\n\nchar* str_concat(char* str1, char* str2){\n\tchar* new_str;\n\tnew_str = calloc(strlen(str1)+strlen(str2)+1, sizeof(char));\n\tnew_str[0] = '\\0';\n\tstrcat(new_str, str1);\n\tstrcat(new_str, str2);\n\tfree(str1);\n\treturn new_str;\n}\n\n\n","\n#ifndef _XOPEN_SOURCE\n#define _XOPEN_SOURCE 700\n#endif\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdint.h>\n\n#include \"display_state.h\"\n\n#include \"board.h\"\n#include \"trajectory.h\"\n#include \"linked_list.h\"\n#include \"bounce_utils.h\"\n\n\nDisplay_state* disp_create(int64_t width, int64_t height){\n\tDisplay_state* self = malloc(sizeof(Display_state));\n\tself->settings = traj_settings_create();\n\tself->last_inject_time = get_time();\n\tself->dboard = board_create(width, height);\n\treturn self;\n}\n\nDisplay_state* disp_create_trajectories(Display_state* self){\n\tself->trajectories = List_create();\n\tfor (int64_t i = 0; i < self->settings->init_count; i++){\n\t\tint64_t min_vel = self->settings->min_velocity;\n\t\tint64_t max_vel = self->settings->max_velocity;\n\t\tdouble x_vel = rand_float_range(min_vel, max_vel);\n\t\tdouble y_vel = rand_float_range(min_vel, max_vel);\n\n\t\ty_vel = skew_parabola(y_vel, min_vel, max_vel);\n\n\t\tuint8_t* color = random_color();\n\t\tList_push(self->trajectories, traj_create(x_vel, y_vel, color));\n\t}\n\n\treturn self;\n}\n\nvoid disp_destroy(Display_state* self){\n\t// Destroy each trajectory\n\tLIST_FOREACH(self->trajectories, first, next, cur){\n\t\ttraj_destroy((Trajectory*)cur->value);\n\t}\n\t// Destroy the list of trajectories\n\tList_destroy(self->trajectories);\n\n\tboard_destroy(self->dboard);\n\ttraj_settings_destroy(self->settings);\n\tfree(self);\n}\n\nchar* disp_get_frame(Display_state* self){\n\tTrajectory_settings* settings = self->settings;\n\tList* trajectories = self->trajectories;\n\n\t// Inject trajectories\n\tif (get_time() - self->last_inject_time > settings->inject_interval){\n\t\tself->last_inject_time = get_time();\n\t\tfor (int64_t i = 0; i < settings->inject_count; i++){\n\t\t\tint64_t min_vel = settings->min_velocity;\n\t\t\tint64_t max_vel = settings->max_velocity;\n\t\t\tdouble x_vel = rand_float_range(min_vel, max_vel);\n\t\t\tdouble y_vel = rand_float_range(min_vel, max_vel);\n\n\t\t\ty_vel = skew_parabola(y_vel, min_vel, max_vel);\n\n\t\t\tuint8_t* color = random_color();\n\t\t\tif (List_count(trajectories) < settings->max_count){\n\t\t\t\tList_push(trajectories, traj_create(x_vel, y_vel, color));\n\t\t\t}\n\t\t}\n\t}\n\t// Refresh and redraw board\n\tboard_renew(self->dboard);\n\tLIST_FOREACH(trajectories, first, next, cur){\n\t\ttraj_draw((Trajectory*)cur->value, self->dboard);\n\t}\n\n\tchar* frame = board_get_frame(self->dboard);\n\treturn frame;\n}\n\n\n","#include \"linked_list.h\"\n#include \"dbg.h\"\n\n/**\n * This linked list implementation was originally written by Zed Shaw as part\n * of his book series \"Learn C the Hard Way\", specifically excercise 32:\n *     http://c.learncodethehardway.org/book/ex32.html\n */\n\n\nList *List_create()\n{\n    return calloc(1, sizeof(List));\n}\n\nvoid List_destroy(List *list)\n{\n    LIST_FOREACH(list, first, next, cur) {\n        if(cur->prev) {\n            free(cur->prev);\n        }\n    }\n\n    free(list->last);\n    free(list);\n}\n\n\nvoid List_clear(List *list)\n{\n    LIST_FOREACH(list, first, next, cur) {\n        free(cur->value);\n    }\n}\n\n\nvoid List_clear_destroy(List *list)\n{\n    List_clear(list);\n    List_destroy(list);\n}\n\n\nvoid List_push(List *list, void *value)\n{\n    ListNode *node = calloc(1, sizeof(ListNode));\n    check_mem(node);\n\n    node->value = value;\n\n    if(list->last == NULL) {\n        list->first = node;\n        list->last = node;\n    } else {\n        list->last->next = node;\n        node->prev = list->last;\n        list->last = node;\n    }\n\n    list->count++;\n\nerror:\n    return;\n}\n\nvoid *List_pop(List *list)\n{\n    ListNode *node = list->last;\n    return node != NULL ? List_remove(list, node) : NULL;\n}\n\nvoid List_unshift(List *list, void *value)\n{\n    ListNode *node = calloc(1, sizeof(ListNode));\n    check_mem(node);\n\n    node->value = value;\n\n    if(list->first == NULL) {\n        list->first = node;\n        list->last = node;\n    } else {\n        node->next = list->first;\n        list->first->prev = node;\n        list->first = node;\n    }\n\n    list->count++;\n\nerror:\n    return;\n}\n\nvoid *List_shift(List *list)\n{\n    ListNode *node = list->first;\n    return node != NULL ? List_remove(list, node) : NULL;\n}\n\nvoid *List_remove(List *list, ListNode *node)\n{\n    void *result = NULL;\n\n    check(list->first && list->last, \"List is empty.\");\n    check(node, \"node can't be NULL\");\n\n    if(node == list->first && node == list->last) {\n        list->first = NULL;\n        list->last = NULL;\n    } else if(node == list->first) {\n        list->first = node->next;\n        check(list->first != NULL, \"Invalid list, somehow got a first that is NULL.\");\n        list->first->prev = NULL;\n    } else if (node == list->last) {\n        list->last = node->prev;\n        check(list->last != NULL, \"Invalid list, somehow got a next that is NULL.\");\n        list->last->next = NULL;\n    } else {\n        ListNode *after = node->next;\n        ListNode *before = node->prev;\n        after->prev = before;\n        before->next = after;\n    }\n\n    list->count--;\n    result = node->value;\n    free(node);\n\nerror:\n    return result;\n}\n\n#include <string.h>\nint str_eq(char *s1, char *s2){\n    if (strcmp(s1, s2) == 0){\n        return 1;\n    }\n    return 0;\n}\n\nint str_in_list(List* list, char* str){\n    LIST_FOREACH(list, first, next, cur){\n        if (str_eq(cur->value, str)){\n            return 1;\n        }\n    }\n    return 0;\n}\n","\n#ifndef _XOPEN_SOURCE\n#define _XOPEN_SOURCE 700\n#endif\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n#include <errno.h>\n#include <stdint.h>\n\n#include \"bounce_utils.h\"\n#include \"trajectory.h\"\n\n\nTrajectory* traj_create(double x_vel, double y_vel, uint8_t* color){\n\tTrajectory* self = malloc(sizeof(Trajectory));\n\n\tself->color = (uint8_t*)strdup((char*)color);\n\n\tself->start_time = get_time() - (rand_float() * rand_float());\n\tself->jump_begin_time = get_time();\n\n\tself->init_x_vel = x_vel;\n\tself->init_y_vel = y_vel;\n\n\t// A float that's either -1, 0, or 1\n\tfloat delta_factor = ((float)(random()%3)) - 1.0;\n\t// Some floating point number between zero and one\n\tfloat grav_delta =  rand_float();\n\n\tself->gravity = (-9.8) + (grav_delta * delta_factor);\n\n\treturn self;\n}\n\nvoid traj_destroy(Trajectory* self){\n\tfree(self->color);\n\tfree(self);\n}\n\n\ndouble traj_getx(Trajectory* self){\n\tdouble t_diff = get_time() - self->start_time;\n\treturn self->init_x_vel * t_diff;\n}\n\n\ndouble traj_gety(Trajectory* self){\n\tdouble t_diff = get_time() - self->jump_begin_time;\n\t// Speeds up the bouncing\n\tt_diff *= 2;\n\tdouble y_pos = self->init_y_vel * t_diff + 0.5 * self->gravity * pow(t_diff, 2.0);\n\n\tif (y_pos <= 0.0){\n\t\ty_pos = 0.0;\n\t\tself->jump_begin_time = get_time();\n\t}\n\treturn y_pos;\n}\n\n\nvoid traj_draw(Trajectory* self, Board* board){\n\tdouble y_pos = traj_gety(self);\n\tint row = floor(y_pos);\n\tint col = ((int)floor(traj_getx(self))) % (board->width);\n\n\tboard_set_cell(board, col, row, self->color);\n}\n\nint traj_beyond_age(Trajectory* self, double given_age){\n\tdouble current_age = get_time() - self->start_time;\n\tif (current_age >= given_age){\n\t\treturn 1;\n\t}\n\treturn 0;\n}\n\n\nTrajectory_settings* traj_settings_create(){\n\tTrajectory_settings* self = malloc(sizeof(Trajectory_settings));\n\tself->max_count = 900;\n\tself->init_count = 300;\n\n\tself->inject_count = 10;\n\tself->inject_interval = 0.5;\n\n\tself->min_velocity = 8;\n\tself->max_velocity = 24;\n\t\n\treturn self;\n}\nvoid traj_settings_destroy(Trajectory_settings* self){\n\tfree(self);\n}\n\n\n\n\n"]}